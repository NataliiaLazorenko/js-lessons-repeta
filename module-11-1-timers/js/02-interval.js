/*
 * Метод setInterval()
 */

// const logger = time => console.log(`Лог кожні ${time}ms - ${Date.now()}`);

// setInterval(logger, 2000, 2000);
//==================================================================

/*
 * Очистка інтервалу з clearInterval()
 */

/*
 * Приклад: користувач зайшов на сайт і ми пропонуємо йому підписатися на розсилку.
 * Пропонувати будемо 3 рази кожну 1 сек. Якщо підпишеться швидше (при 1-й чи 2-й пропозиції), перестаємо пропонувати
 */

// console.log('До');

// 1. Створюємо змінну, в якій зберігатимемо скільки разів користувачу показано пропозицію підписатися на розсилку
let subscriptionCounter = 0;
// 2. Створюємо змінну, в якій зберігатимемо чи користувач підписався (щоб змогли перестати пропонувати, якщо вже підписався)
let hasSubscribed = false;

// 3. Реєструємо виклик функції 1 раз в секунду
//    На своє місце setInterval повертає id, який потрібен для відміни інтервалу. Тому виклик setInterval записуємо у змінну
const intervalId = setInterval(() => {
  // 5. Перевіряємо, якщо при наступному виклику функції subscriptionCounter = 3 або користувач вже підписався, зупиняємо інтервал
  //    Якщо користувач підписався (н-д, десь в інтерфейсі клікнув певну кнопку), потрібно поставити hasSubscribed = true
  if (subscriptionCounter === 3 || hasSubscribed) {
    console.log('Зупиняємо інтервал');
    // 6. Очищуємо інтервал за допомогою clearInterval. Передаємо йому id інтервалу
    clearInterval(intervalId);
    // 7. Виходимо із функції, щоб не виконувався код нижче всередині setInterval
    return;
  }

  console.log('Підпишись на розсилку!');
  // hasSubscribed = true; // лише для перевірки роботи коду

  // 4. Щоразу, коли викликається функція, збільшуємо на 1 subscriptionCounter
  subscriptionCounter += 1;
}, 1000);

// console.log('Після');
